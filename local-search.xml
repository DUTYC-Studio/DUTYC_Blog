<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Linux 下 Barotrauma（潜渊症）服务器的高可用部署方案</title>
    <link href="/2025/06/16/2025061602/"/>
    <url>/2025/06/16/2025061602/</url>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><a href="#%E8%83%8C%E6%99%AF%E4%B8%8E%E6%96%B9%E6%A1%88%E9%80%89%E6%8B%A9">背景与方案选择</a>  </li><li><a href="#%E6%96%B9%E6%A1%88%E4%B8%80%E4%BD%BF%E7%94%A8-mcsm-%E9%9D%A2%E6%9D%BF%E7%9A%84-docker-%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2">方案一：使用 MCSM 面板的 Docker 容器部署</a>  <ul><li><a href="#%E4%BC%98%E5%8A%BF">优势</a>  </li><li><a href="#%E6%9E%B6%E6%9E%84%E6%A6%82%E8%BF%B0">架构概述</a>  </li><li><a href="#%E9%83%A8%E7%BD%B2%E6%AD%A5%E9%AA%A4">部署步骤</a>  <ul><li><a href="#1-%E5%AE%89%E8%A3%85-mcsm-%E9%9D%A2%E6%9D%BF%E5%92%8C-docker">1. 安装 MCSM 面板和 Docker</a>  </li><li><a href="#2-%E5%88%9B%E5%BB%BA%E6%BD%9C%E6%B8%8A%E7%97%87%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%9E%E4%BE%8B">2. 创建潜渊症服务器实例</a>  </li><li><a href="#3-%E5%AE%9E%E7%8E%B0%E9%AB%98%E5%8F%AF%E7%94%A8%E6%80%A7">3. 实现高可用性</a>  </li><li><a href="#4-%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E4%B8%8E%E5%85%AC%E7%BD%91%E8%AE%BF%E9%97%AE">4. 内网穿透与公网访问</a></li></ul></li></ul></li><li><a href="#%E6%96%B9%E6%A1%88%E4%BA%8Cdocker-compose--dockerfile-%E9%83%A8%E7%BD%B2k8s">方案二：Docker Compose + Dockerfile 部署（K8S）</a>  </li><li><a href="#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88">常见问题与解决方案</a>  </li><li><a href="#%E6%80%BB%E7%BB%93%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E5%BB%BA%E8%AE%AE">总结与最佳实践建议</a></li></ol><hr><h2 id="当前方案的高可用性定位"><a href="#当前方案的高可用性定位" class="headerlink" title="当前方案的高可用性定位"></a><strong>当前方案的高可用性定位</strong></h2><p>当前方案基于 <strong>MCSM 面板 + Docker 容器</strong> 实现了基础层面的容错能力，适用于个人玩家或小型团队的轻量级部署需求。其核心高可用性设计包括：</p><ol><li><strong>容器自动重启</strong> ：通过 MCSM 面板配置的「自动重启」策略，实现服务崩溃后的快速恢复。</li><li><strong>数据持久化</strong> ：通过 Volume 挂载 <code>/home/mcsm/barot_server</code> 目录，保障配置文件与存档数据不丢失。</li><li><strong>基础健康检查</strong> ：手动执行 <code>nc -uvz</code> 检查 UDP 端口状态，辅助判断服务存活。</li></ol><p><strong>适用场景</strong> ：</p><ul><li>个人玩家开服娱乐</li><li>小型社区（10人以下）稳定运行</li><li>技术门槛较低的快速部署</li></ul><h2 id="背景与方案选择"><a href="#背景与方案选择" class="headerlink" title="背景与方案选择"></a>背景与方案选择</h2><p>近期，我的《潜渊症》网友们反馈游戏自带的 P2P 联机存在较高延迟，计划单独购置一台服务器，安装 Windows 系统、注册 Steam 账号并重新购买游戏。我认为这一方案过于冗余——我们现有的 主机上运行的 Ubuntu 系统已足够服务器部署。</p><p>本文将详细介绍如何在 Linux 系统上实现潜渊症（Barotrauma）服务器的高可用部署，涵盖以下两种主流方案：  </p><ol><li>使用 MCSM 面板的 Docker 容器部署  </li><li>Docker Compose + Dockerfile 部署（K8S）：请见 P2</li></ol><hr><h2 id="方案一：使用-MCSM-面板的-Docker-容器部署"><a href="#方案一：使用-MCSM-面板的-Docker-容器部署" class="headerlink" title="方案一：使用 MCSM 面板的 Docker 容器部署"></a>方案一：使用 MCSM 面板的 Docker 容器部署</h2><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul><li>图形化界面操作，适合不熟悉命令行的用户  </li><li>支持容器管理、日志查看和进程控制  </li><li>易于实现基础高可用性（如自动重启、数据持久化）</li></ul><h3 id="架构概述"><a href="#架构概述" class="headerlink" title="架构概述"></a>架构概述</h3><ul><li><strong>MCSM 面板</strong>：提供可视化容器管理  </li><li><strong>Docker 容器</strong>：隔离服务器运行环境，支持跨平台部署  </li><li><strong>Volume 挂载</strong>：确保服务器配置和存档数据持久化  </li><li><strong>MCSM 自带功能</strong>：实现容器编排和监控</li></ul><h3 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h3><h4 id="1-安装-MCSM-面板和-Docker"><a href="#1-安装-MCSM-面板和-Docker" class="headerlink" title="1. 安装 MCSM 面板和 Docker"></a>1. 安装 MCSM 面板和 Docker</h4><p><strong>一行命令快速安装 MCSM</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> su -c <span class="hljs-string">&quot;wget -qO- https://script.mcsmanager.com/setup_cn.sh | bash&quot;</span><br></code></pre></td></tr></table></figure><p><strong>安装后的使用方法</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl start mcsm-&#123;web,daemon&#125;  <span class="hljs-comment"># 开启面板  </span><br>systemctl stop mcsm-&#123;web,daemon&#125;   <span class="hljs-comment"># 关闭面板  </span><br></code></pre></td></tr></table></figure><p><strong>说明</strong>：  </p><ul><li>脚本仅适用于 Ubuntu&#x2F;CentOS&#x2F;Debian&#x2F;Arch Linux  </li><li>面板代码与运行环境自动安装在 <code>/opt/mcsmanager/</code> 目录下  </li><li>如需手动安装，参考：  <ul><li><a href="https://docs.mcsmanager.com/zh_cn/">快速开始 | MCSManager</a>  </li><li><a href="https://github.com/MCSManager/MCSManager/blob/master/README_ZH.md">MCSManager&#x2F;README_ZH.md</a></li></ul></li></ul><p><strong>安装 Docker 并配置镜像加速</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash &lt;(curl -f -s --connect-timeout 10 --retry 3 https://linuxmirrors.cn/docker.sh) \<br>--<span class="hljs-built_in">source</span> mirrors.tencent.com/docker-ce \<br>--source-registry docker.1ms.run \<br>--protocol https \<br>--install-latested <span class="hljs-literal">true</span> \<br>--close-firewall <span class="hljs-literal">false</span> \<br>--ignore-backup-tips<br></code></pre></td></tr></table></figure><p><strong>参考来源</strong>：  </p><ul><li><a href="https://zhuanlan.zhihu.com/p/1914353637645345944">国内 Docker 镜像加速列表 - 知乎</a></li></ul><hr><h4 id="2-创建潜渊症服务器实例"><a href="#2-创建潜渊症服务器实例" class="headerlink" title="2. 创建潜渊症服务器实例"></a>2. 创建潜渊症服务器实例</h4><p><strong>登录 MCSM 面板</strong><br>访问 <code>http://&lt;服务器IP&gt;:23333</code>  </p><p><strong>创建数据持久化目录</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> /home/mcsm/  <br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> /home/mcsm/barot_server  <br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chmod</span> 777 /home/mcsm/barot_server  <br></code></pre></td></tr></table></figure><p><strong>新建实例</strong>  </p><ol><li><p>点击 <strong>“创建实例”</strong>  </p></li><li><p>选择 <strong>Steam 游戏服务器 &gt; 使用 Docker 镜像快速部署</strong>  </p></li><li><p>填写以下关键信息：  </p><ul><li><p><strong>实例名称</strong>：任意  </p></li><li><p><strong>镜像名称</strong>：<code>cm2network/steamcmd:latest</code>  </p></li><li><p><strong>数据储存目录</strong>：<code>/data</code>  </p></li><li><p><strong>勾选</strong>：变更容器默认工作目录  </p></li><li><p><strong>启动命令</strong>（暂时使用）：<code>bash</code>  </p></li><li><p><strong>服务端文件目录</strong>：<code>/home/mcsm/barot_server</code>  </p><blockquote><p>[!NOTE]</p><p>确保信息如图所示</p></blockquote></li></ul><img src="/img/QQ20250616-1146321.png" alt="QQ20250616-112122" style="zoom: 80%;" /></li></ol><p><strong>确认信息无误后点击</strong>：<br><code>创建实例</code> → <code>选择 Steam 游戏服务器</code>  →  <code>使用Docker镜像快速部署</code>→<code>前往实例控制台</code> → <code>开启</code>  </p><p><strong>进入实例终端后，输入以下命令</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /home/steam/steamcmd/  <br><span class="hljs-comment"># 确保该目录下可以看到以下文件：  </span><br><span class="hljs-comment"># linux32 linux64 package public siteserverui steam.sh steamcmd.sh steamservice.so  </span><br>./steamcmd.sh +force_install_dir ./barotrauma-server +login anonymous +app_update 1026340 validate +<span class="hljs-built_in">exit</span>  <br><br><span class="hljs-comment"># 将服务端文件复制到持久化目录  </span><br><span class="hljs-built_in">cp</span> -r ./barotrauma-server /data  <br><br><span class="hljs-comment"># 进入持久化储存的服务端目录  </span><br><span class="hljs-built_in">cd</span> /data/barotrauma-server  <br><br><span class="hljs-comment"># 首次启动会提示找不到 serversettings.xml 文件（正常现象）  </span><br>./DedicatedServer  <br></code></pre></td></tr></table></figure><p><strong>输出示例</strong>：  </p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">Couldn&#x27;t load xml document &quot;serversettings.xml&quot;! &#123;Could not find file <span class="hljs-emphasis">&#x27;/data/barotrauma-server/serversettings.xml&#x27;</span>.&#125;  <br><span class="hljs-symbol">WARNING: </span>File &quot;serversettings.xml&quot; not found. Starting the server with default settings.  <br></code></pre></td></tr></table></figure><p><strong>退出服务端并配置文件</strong>  </p><ol><li>输入 <code>exit</code> 命令退出服务端  </li><li>点击 <strong>右上角关闭实例</strong>  </li><li>点击 <strong>文件管理 &gt; barotrauma-server 目录</strong>  </li><li>搜索 <code>serversettings.xml</code> 文件并打开编辑</li></ol><p>建议<code>RequireAuthentication</code>规则改为<code>False</code>,其余配置自行更改,不是本次部署的重点</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">serversettings</span> </span><br><span class="hljs-tag">  <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;27015&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">queryport</span>=<span class="hljs-string">&quot;27016&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;123456&quot;</span> #(<span class="hljs-attr">可选</span>)<span class="hljs-attr">设置密码</span></span><br><span class="hljs-tag">  <span class="hljs-attr">...</span>              </span><br><span class="hljs-tag">  <span class="hljs-attr">ServerName</span>=<span class="hljs-string">&quot;Server&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">ServerMessageText</span>=<span class="hljs-string">&quot;这里填写服务器简介&quot;</span> </span><br><span class="hljs-tag">  <span class="hljs-attr">IsPublic</span>=<span class="hljs-string">&quot;False&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">TickRate</span>=<span class="hljs-string">&quot;20&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">MaxLagCompensation</span>=<span class="hljs-string">&quot;150&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">RequireAuthentication</span>=<span class="hljs-string">&quot;False&quot;</span>   #<span class="hljs-attr">将这里改为False</span></span><br><span class="hljs-tag">  <span class="hljs-attr">RandomizeSeed</span>=<span class="hljs-string">&quot;True&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">UseRespawnShuttle</span>=<span class="hljs-string">&quot;True&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">RespawnInterval</span>=<span class="hljs-string">&quot;300&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">MaxTransportTime</span>=<span class="hljs-string">&quot;180&quot;</span></span><br></code></pre></td></tr></table></figure><p>然后点击<code>应用实例设置</code>,在<code>基础设置</code>中将启动命令更改为<code>/data/barotrauma-server/DedicatedServer</code>;然后点击<code>容器化</code>,点击<code>开放端口</code>的<code>编辑</code>选项</p><ol><li>点击 <strong>基础设置</strong>  </li><li>将启动命令更改为：<code>/data/barotrauma-server/DedicatedServer</code>  </li><li>点击 <strong>容器化 &gt; 开放端口 &gt; 编辑</strong>  </li><li>添加端口映射：  <ul><li><code>27015:27015</code>（协议：UDP）  </li><li><code>27016:27016</code>（协议：UDP）</li></ul></li></ol><img src="/img/QQ20250616-124741.png" alt="QQ20250616-124741" style="zoom:67%;" /><p><strong>如图添加端口映射</strong></p><p><strong>完成以上操作后</strong>：<br>点击 <strong>确定</strong> → <strong>保存</strong> → <strong>启动实例</strong><br>服务器连接地址为：<code>你的 IP:27015</code>  </p><hr><h4 id="3-实现高可用性"><a href="#3-实现高可用性" class="headerlink" title="3. 实现高可用性"></a>3. 实现高可用性</h4><ul><li><p><strong>自动重启策略</strong>：<br>在 MCSM 中设置实例重启策略为 <strong>“自动重启”</strong> 和 <strong>“自动启动”</strong>  </p></li><li><p><strong>兼容性配置</strong>：<br>关闭 <strong>仿真终端</strong>  </p></li><li><p><strong>健康检查</strong>：<br>定期执行以下命令检查 UDP 端口：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -uvz your_IP 27015  <br></code></pre></td></tr></table></figure></li><li><p><strong>数据备份</strong>：<br>定期备份宿主机 <code>/home/mcsm/barot_server</code> 目录</p></li></ul><hr><h4 id="4-内网穿透与公网访问"><a href="#4-内网穿透与公网访问" class="headerlink" title="4. 内网穿透与公网访问"></a>4. 内网穿透与公网访问</h4><p><strong>自行配置穿透工具</strong>  </p><p><strong>开放防火墙</strong>：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> ufw allow 27015/udp  <br><span class="hljs-built_in">sudo</span> ufw allow 27016/udp  <br></code></pre></td></tr></table></figure><hr><h2 id="方案二：Docker-Compose-Dockerfile-部署（K8S）"><a href="#方案二：Docker-Compose-Dockerfile-部署（K8S）" class="headerlink" title="方案二：Docker Compose + Dockerfile 部署（K8S）"></a>方案二：Docker Compose + Dockerfile 部署（K8S）</h2><p>因篇幅所限，请见《Barotrauma_Docker_Compose_部署指南_P2.md》  </p><hr><h2 id="常见问题与解决方案"><a href="#常见问题与解决方案" class="headerlink" title="常见问题与解决方案"></a>常见问题与解决方案</h2><table><thead><tr><th>问题现象</th><th>解决方案</th></tr></thead><tbody><tr><td>XML 格式错误</td><td>使用在线工具修复，确保 <code>&lt;ServerSettings&gt;</code> 为唯一根节点</td></tr><tr><td>客户端连接失败</td><td>检查 UDP 端口映射，关闭 Steam 认证（<code>&lt;RequireAuthentication&gt;false&lt;/RequireAuthentication&gt;</code>）</td></tr><tr><td>容器自动退出</td><td>确保 <code>DedicatedServer</code> 有执行权限：<code>chmod +x DedicatedServer</code></td></tr><tr><td>防火墙限制</td><td>开放 UDP 端口：<code>sudo ufw allow 27015/udp</code></td></tr></tbody></table><hr><h2 id="总结与最佳实践建议"><a href="#总结与最佳实践建议" class="headerlink" title="总结与最佳实践建议"></a>总结与最佳实践建议</h2><table><thead><tr><th>方案</th><th>适用场景</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>MCSM 面板部署</td><td>快速搭建、图形化操作</td><td>简单易用、内置管理功能</td><td>灵活性较低，依赖面板功能</td></tr><tr><td>Docker Compose + Dockerfile</td><td>自定义部署、CI&#x2F;CD 集成</td><td>灵活、支持多容器编排</td><td>配置复杂，需熟悉 Docker</td></tr></tbody></table><p><strong>最佳实践建议</strong>：  </p><ol><li>优先使用 MCSM 面板：适合快速部署和日常管理  </li><li>进阶使用 Docker Compose：适合需要自定义配置、自动化部署和集群管理的场景  </li><li>高可用性扩展：结合 Docker Swarm 或 Kubernetes 实现负载均衡和故障转移</li></ol><hr><p><strong>版本迭代说明</strong>  </p><ul><li>当前版本：v1.0（2025-06-16）  </li><li>更新日志：新增内网穿透配置指引、优化防火墙规则示例</li></ul><hr>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Docker</tag>
      
      <tag>运维</tag>
      
      <tag>K8S</tag>
      
      <tag>游戏服务器</tag>
      
      <tag>高可用化部署</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IBM X3650 M4 服务器折腾日记：200元捡漏实战全记录</title>
    <link href="/2025/03/16/2025032301/"/>
    <url>/2025/03/16/2025032301/</url>
    
    <content type="html"><![CDATA[<h1 id="IBM-X3650-M4-服务器折腾日记：200元捡漏与终极救赎"><a href="#IBM-X3650-M4-服务器折腾日记：200元捡漏与终极救赎" class="headerlink" title="IBM X3650 M4 服务器折腾日记：200元捡漏与终极救赎"></a><strong>IBM X3650 M4 服务器折腾日记：200元捡漏与终极救赎</strong></h1><hr><h2 id="前言：一场意外的技术奇遇"><a href="#前言：一场意外的技术奇遇" class="headerlink" title="前言：一场意外的技术奇遇"></a><strong>前言：一场意外的技术奇遇</strong></h2><p>那是一个阳光明媚的周末，我裹着外套穿梭在本地二手市场的摊位间。原本只想淘个企业路由器，却在某个堆满废旧交换机的角落里，瞥见一台蒙尘的机架设备——IBM的金属铭牌在昏黄的灯光下泛着冷光。老板正叼着烟整理货架，见我驻足打量，随口说道：“这铁疙瘩放三年了，开机都成问题，你要的话给个废铁价。”<br>掀开机箱盖的瞬间，一股混合着灰尘与电路板特有的焦香扑面而来。按下电源键，两声清脆的“滴——滴——”自检声在嘈杂的市场里格外清晰。机箱内，两块300G SAS硬盘仍在托架上坚守岗位，电源模块的绿色指示灯稳定闪烁。经过一番讨价还价，这台被遗弃的服务器以200元成交，还附赠了一根泛黄的超五类网线。——这价格甚至不够买一块全新的机械硬盘！</p><img src="/img/zip/3F15A9B80.jpg" alt="3F15A9B80" style="zoom:25%;" /><p><img src="/img/zip/serverquanj.jpg" alt="serverquanj" style="zoom:25%;" /><img src="/img/zip/ibmx3650.jpg" alt="ibmx3650" style="zoom: 25%;" /></p><hr><h4 id="硬件配置总览"><a href="#硬件配置总览" class="headerlink" title="硬件配置总览"></a><strong>硬件配置总览</strong></h4><ul><li><p><strong>CPU</strong>：单路Intel Xeon E5-2603 v2（4核1.8GHz）</p></li><li><p><strong>内存</strong>：8GB DDR3 ECC ×2</p></li><li><p><strong>存储</strong>：300GB SAS硬盘 ×2</p></li><li><p><strong>阵列卡</strong>：板载ServeRAID控制器</p></li><li><p><strong>电源</strong>：550W冗余电源</p><img src="/img/zip/imm.jpg" alt="imm" style="zoom:25%;" /></li></ul><hr><h4 id="问题总览"><a href="#问题总览" class="headerlink" title="问题总览"></a><strong>问题总览</strong></h4><p>（一）（已解决）选择从 USB 启动进入 PE，会出现蓝屏，提示无法识别硬盘<br>（二）（已解决）部分 PE 可以正常进入，但无法识别服务器磁盘，进入 Windows Server 2008 的安装程序也无法识别到硬盘<br>（三）（已解决）在选择 PVE 的安装模式时，不论选择“图形化安装”还是“命令行安装”，都会卡在某个图形驱动加载界面<br>（四）（已解决）PVE安装完成后，重启服务器，在正常完成引导后，卡在系统加载界面</p><h2 id="第一战：突破原系统防线"><a href="#第一战：突破原系统防线" class="headerlink" title="第一战：突破原系统防线"></a><strong>第一战：突破原系统防线</strong></h2><p><strong>目标</strong>：绕过Windows Server 2008登录密码并获取驱动</p><h5 id="问题一：PE启动蓝屏（错误代码DRIVER-IRQL-NOT-LESS-OR-EQUAL）"><a href="#问题一：PE启动蓝屏（错误代码DRIVER-IRQL-NOT-LESS-OR-EQUAL）" class="headerlink" title="问题一：PE启动蓝屏（错误代码DRIVER IRQL NOT LESS OR EQUAL）"></a><strong>问题一：PE启动蓝屏（错误代码DRIVER IRQL NOT LESS OR EQUAL）</strong></h5><ul><li><strong>现象</strong>：使用优启通、微PE,小兵PE等工具从U盘启动时，均出现蓝屏报错。</li></ul><img src="/img/zip/drivererror.jpg" alt="drivererror" style="zoom: 50%;" /><ul><li><strong>根因分析</strong>：PE未集成板载RAID卡（ServeRAID C100）驱动，导致无法识别磁盘。</li><li><strong>破局时刻</strong>：当尝试老毛桃PE时，奇迹发生了——<strong>直接进入桌面且自动识别RAID阵列</strong>（未进行任何手动设置）。打开磁盘管理器，赫然显示“VD0: 279.4GB”</li><li><strong>解决方案</strong>：<ol><li>使用<strong>老毛桃PE</strong>直接启动</li><li>进入PE后自动识别RAID阵列，成功挂载磁盘。</li><li>通过NTPWEdit工具清除原系统密码。</li></ol></li></ul><blockquote><p>💡 <strong>关键发现</strong>：<br>原系统D盘已预置完整驱动包（路径：<code>D:\win2008驱动\Drivers</code>   <code>D:\阵列卡驱动</code>），包含RAID卡、网卡等驱动文件。</p><p>💡 <strong>意外收获:</strong>   硬盘中竟存有某医药公司的系统服务端（后证实为无用数据，但驱动文件完美适配）</p><p><strong>老毛桃PE的RAID驱动兼容性令人震惊</strong></p></blockquote><hr><h4 id="问题二：PE-安装程序不认盘"><a href="#问题二：PE-安装程序不认盘" class="headerlink" title="问题二：PE&#x2F;安装程序不认盘"></a><strong>问题二：PE&#x2F;安装程序不认盘</strong></h4><ul><li><strong>现象</strong>：<ul><li>微PE 中无法识别到硬盘阵列</li><li>Windows Server 2008安装程序执行<code>diskpart list disk</code>无磁盘显示。</li></ul></li><li><strong>根因分析</strong>：SAS硬盘需依赖RAID卡驱动，而标准PE和安装镜像未内置相关驱动。</li><li><strong>解决方案</strong>：<ul><li>使用<strong>老毛桃PE</strong>直接启动</li><li>从原系统提取驱动包备用。</li><li>若需重装系统，可通过DISM++向安装镜像注入RAID驱动。</li></ul></li></ul><blockquote><p>[!NOTE]  <strong>附加内容</strong>:</p><p>RAID阵列配置:参考文章<a href="https://www.topunix.com/post-3943.html">联想服务器配置 -X3850,X3650-RAID配置-IMM配置 - 拓扑园 (topunix.com)</a></p></blockquote><hr><h2 id="第二战：PVE的魔幻崩溃之旅"><a href="#第二战：PVE的魔幻崩溃之旅" class="headerlink" title="第二战：PVE的魔幻崩溃之旅"></a><strong>第二战：PVE的魔幻崩溃之旅</strong></h2><h5 id="问题三：PVE安装卡图形驱动"><a href="#问题三：PVE安装卡图形驱动" class="headerlink" title="问题三：PVE安装卡图形驱动"></a><strong>问题三：PVE安装卡图形驱动</strong></h5><ul><li><p><strong>现象</strong>：</p><ul><li><p>选择PVE安装模式后，卡死在以下界面：</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tcl">Welcome to the Proxmox VE <span class="hljs-number">8.2</span> installer  <br>mounting <span class="hljs-keyword">proc</span><span class="hljs-title"> filesystem...</span> <span class="hljs-title"> </span><br><span class="hljs-title">loading</span> drivers:<span class="hljs-title"> nvidiafb</span> ahci<span class="hljs-title"> nvme...</span>  <br></code></pre></td></tr></table></figure></li></ul><img src="/img/zip/pveinstallerror.png" alt="pveinstallerror" style="zoom:50%;" /></li><li></li><li><p><strong>根因分析</strong>：PVE默认加载NVIDIA图形驱动，与老旧服务器显卡冲突。</p></li><li><p><strong>解决方案</strong>：</p><ol><li>在PVE安装界面Grub菜单按<code>e</code>编辑启动项。</li><li>在<code>linux</code>行末尾添加<code>nomodeset</code>参数（禁用内核级图形驱动）。</li><li>按Ctrl+X启动后成功进入安装程序。</li></ol></li></ul><hr><h5 id="问题四：PVE启动卡Ramdisk"><a href="#问题四：PVE启动卡Ramdisk" class="headerlink" title="问题四：PVE启动卡Ramdisk"></a><strong>问题四：PVE启动卡Ramdisk</strong></h5><ul><li><strong>现象</strong>：安装完成后重启，卡在<code>loading initial ramdisk...</code>且无法ping通</li><li><strong>根因分析</strong>：Ventoy的GRUB2模式与PVE存在兼容性问题（<a href="https://github.com/ventoy/Ventoy/issues/2782">GitHub Issue #2782</a>）。</li><li><strong>解决方案</strong>：(按知乎教程<a href="https://zhuanlan.zhihu.com/p/21296865482">使用ventoy安装pve 卡 loading initial ramdisk…</a>用DD模式写入U盘——但耗时过长，最终放弃)<ol><li>改用Rufus以<strong>DD模式</strong>写入PVE镜像至U盘。</li><li>重新安装后引导正常（但最终因驱动问题放弃PVE，转向ESXi）</li></ol></li></ul><h2 id="最终方案：ESXi的完美适配"><a href="#最终方案：ESXi的完美适配" class="headerlink" title="最终方案：ESXi的完美适配"></a><strong>最终方案：ESXi的完美适配</strong></h2><ol><li><p><strong>丝滑安装实录</strong>：</p><ul><li>使用Ventoy直接启动ESXi 7.0镜像，无需特殊配置。</li></ul><img src="/img/zip/esxi1.png" alt="esxi1" style="zoom:50%;" /><ul><li>自动识别硬件：<ul><li>RAID卡显示为LSI MegaRAID 9240-8i</li><li>板载网卡识别为Broadcom BCM5716</li></ul></li></ul></li></ol><img src="/img/zip/esxi2.jpg" alt="esxi2" style="zoom: 33%;" /><ol><li><p><strong>虚拟机部署</strong>：</p><p><img src="/img/zip/E9233887542577EC82B06693BE46D241.png" alt="E9233887542577EC82B06693BE46D241"></p><ul><li>OpenWRT软路由</li><li>飞牛NAS</li><li>Windows Server 2019测试环境</li></ul></li></ol><hr><h4 id="技术对比与最终选择"><a href="#技术对比与最终选择" class="headerlink" title="技术对比与最终选择"></a><strong>技术对比与最终选择</strong></h4><table><thead><tr><th align="left">项目</th><th align="left">PVE 8.2</th><th align="left">ESXi 7.0</th></tr></thead><tbody><tr><td align="left">安装耗时</td><td align="left">3小时（未完成）</td><td align="left">18分钟</td></tr><tr><td align="left">硬件兼容性</td><td align="left">需手动调试内核参数</td><td align="left">原生驱动支持</td></tr><tr><td align="left">管理界面</td><td align="left">频繁报错</td><td align="left">稳定流畅</td></tr></tbody></table><hr><h4 id="给技术宅的终极建议"><a href="#给技术宅的终极建议" class="headerlink" title="给技术宅的终极建议"></a><strong>给技术宅的终极建议</strong></h4><ol><li><strong>老旧服务器首选ESXi</strong>：避免内核适配的玄学问题</li><li><strong>慎用Ventoy安装PVE</strong>：建议直接使用Rufus以DD模式写盘</li><li><strong>驱动备份</strong>：<ul><li>优先检查原系统中遗留文件以搜寻驱动</li><li>老毛桃PE的RAID驱动兼容性令人震惊</li></ul></li></ol><blockquote><p>[!IMPORTANT]</p><h2 id="免责声明"><a href="#免责声明" class="headerlink" title="免责声明"></a><strong>免责声明</strong></h2><ol><li><strong>图片来源</strong><br>本文所涉技术图片均来自网络公开资源，版权归属原作者。引用仅作技术交流，若涉及侵权请联系删除<a href="mailto:&#x64;&#117;&#x74;&#x79;&#x63;&#x2e;&#115;&#116;&#117;&#100;&#x69;&#x6f;&#x40;&#x6f;&#x75;&#x74;&#x6c;&#x6f;&#x6f;&#x6b;&#46;&#99;&#111;&#109;">&#x64;&#117;&#x74;&#x79;&#x63;&#x2e;&#115;&#116;&#117;&#100;&#x69;&#x6f;&#x40;&#x6f;&#x75;&#x74;&#x6c;&#x6f;&#x6f;&#x6b;&#46;&#99;&#111;&#109;</a></li><li><strong>操作风险</strong><br>服务器改造存在硬件损坏及数据丢失风险，请自行备份并谨慎操作。文中方法未经全面验证，后果自负。</li><li><strong>第三方内容</strong><br>外部链接及工具安全性请自行甄别，引用内容不代表作者立场。</li><li><strong>读者责任</strong><br>参照本文操作即视为接受风险，企业设备改造可能影响保修，二手硬件存在隐患。</li></ol><p><strong>非商用声明</strong>：本文为技术分享，禁止用于商业用途。</p><p><strong>参考文章:</strong></p><p><a href="https://www.cnblogs.com/Jerseyblog/p/4992121.html">windows server 2008 的登录密码,有效的</a></p><p><a href="https://www.mydigit.cn/forum.php?mod=viewthread&tid=70429">寻找一款适合服务器维护的PE系统 - 电脑软硬派 数码之家 (mydigit.cn)</a></p><p><a href="https://blog.csdn.net/LLcmpgheng/article/details/109048523">IBM x3650 M4服务器安装winserver2008操作系统(2020.10.12)_system x3650 m4server2008r2驱动</a></p><p><a href="https://blog.csdn.net/qq_44236793/article/details/121754395">IBM X3650 M4服务器使用U盘重装系统教程_ibm x3650 m4安装2008r2</a></p><p><a href="https://www.topunix.com/post-3943.html">联想服务器RAID配置 -X3850,X3650-RAID配置-IMM配置 - 拓扑园 (topunix.com)</a></p><p><a href="https://nanodesu.net/archives/49/">PVE 8.2 安装过程卡住解决</a></p><p><a href="https://zhuanlan.zhihu.com/p/21296865482">使用ventoy安装pve 卡 loading initial ramdisk…</a></p><p><a href="https://blog.csdn.net/z609932088/article/details/143777861">PVE纵览-安装系统卡“Loading Driver”的快速解决方案_pve安装卡在代码界面</a></p><p><a href="https://blog.csdn.net/yleihj/article/details/125885283">IBM3650M4实体机安装ESXI7.0</a></p></blockquote><p><strong>互动话题</strong>：<br>“你在折腾老旧服务器时遇到过哪些玄学问题？欢迎在评论区分享你的血泪史！”</p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>PVE</tag>
      
      <tag>ESXi</tag>
      
      <tag>IBM SystemX</tag>
      
      <tag>运维</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>P2[向NAS借一点空间]_iSCSI配置之Docker一键部署</title>
    <link href="/2025/02/15/P2-iSCSI%E9%85%8D%E7%BD%AE%E4%B9%8BDocker%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2/"/>
    <url>/2025/02/15/P2-iSCSI%E9%85%8D%E7%BD%AE%E4%B9%8BDocker%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="P2-iSCSI配置之Docker一键部署"><a href="#P2-iSCSI配置之Docker一键部署" class="headerlink" title="P2_iSCSI配置之Docker一键部署"></a>P2_iSCSI配置之Docker一键部署</h1><blockquote><p>[!NOTE]</p><p>书接上回  <a href="https://blog.dutyc.top/2025/02/13/P1_%E9%83%A8%E7%BD%B2%E4%B8%80%E4%B8%AAiSCSI%E6%9C%8D%E5%8A%A1%E7%AB%AF%EF%BC%8C%E5%B0%86NAS%E7%A9%BA%E9%97%B4%E6%8C%82%E8%BD%BD%E6%88%90%E7%9C%9F%E6%AD%A3%E7%9A%84%E7%94%B5%E8%84%91%E7%A1%AC%E7%9B%98/">P1_部署一个iSCSI服务端，将NAS空间挂载成真正的电脑硬盘 - DUTYC博客</a> ,在本地宿主机部署了iSCSI服务,但是配置过程过于繁琐,且对生产环境来讲有比较大的风险,这一次我们使用docker容器来部署,减轻工作量.部分教程参考自<a href="https://blog.csdn.net/weixin_44486757/article/details/126694464?spm=5176.28103460.0.0.297c5d27OF8hTd">Docker实战-ISCSI_docker iscsi-CSDN博客</a></p></blockquote><h3 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1.环境准备"></a>1.环境准备</h3><h4 id="1-1安装docker"><a href="#1-1安装docker" class="headerlink" title="1.1安装docker"></a>1.1安装docker</h4><ul><li>更新系统软件包</li></ul><p>首先，确保你的系统软件包是最新的。打开终端并运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> yum update -y<br></code></pre></td></tr></table></figure><ul><li>设置 Docker 的仓库</li></ul><p>在安装新版本的 Docker 之前，需要设置 Docker 的官方稳定仓库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装一些必要的包，使得 yum 可以使用基于 HTTPS 的仓库</span><br><span class="hljs-built_in">sudo</span> yum install -y yum-utils<br><br><span class="hljs-comment"># 设置 Docker 的稳定版仓库</span><br><span class="hljs-built_in">sudo</span> yum-config-manager \<br>    --add-repo \<br>    https://download.docker.com/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure><ul><li>安装 Docker 引擎</li></ul><p>现在你可以从设置好的稳定仓库中安装最新版本的 Docker 引擎了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> yum install docker-ce docker-ce-cli containerd.io<br></code></pre></td></tr></table></figure><p>如果有多个 Docker 版本可用，你也可以通过指定确切的版本号来安装特定版本的 Docker：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 列出可用的 Docker 版本</span><br>yum list docker-ce --showduplicates | <span class="hljs-built_in">sort</span> -r<br><br><span class="hljs-comment"># 使用版本号替换 &lt;VERSION_STRING&gt; 来安装特定版本</span><br><span class="hljs-built_in">sudo</span> yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io<br></code></pre></td></tr></table></figure><ul><li>配置Docker 使用加速器镜像源</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /etc/docker/<br>vim /etc/docker/daemon.json<br></code></pre></td></tr></table></figure><p>​        添加镜像加速地址,注意镜像加速地址可能会失效,测试地址有效后再配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;<br>    <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<br>        <span class="hljs-string">&quot;https://docker.xuanyuan.me&quot;</span><br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><p>​       重新加载docker服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl daemon-reload<br><span class="hljs-built_in">sudo</span> systemctl restart docker<br></code></pre></td></tr></table></figure><ul><li>启动 Docker 并设置开机自启</li></ul><p>安装完成后，启动 Docker，并将其配置为随系统启动。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl start docker<br><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> docker<br></code></pre></td></tr></table></figure><ul><li>确认Docker组件已经启动：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ps aux | grep docker<br></code></pre></td></tr></table></figure><h3 id="2-部署iSCSI-docker服务端"><a href="#2-部署iSCSI-docker服务端" class="headerlink" title="2.部署iSCSI  docker服务端"></a>2.部署iSCSI  docker服务端</h3><ul><li>下载iSCSI Docker镜像：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull wtnb75/stgt<br></code></pre></td></tr></table></figure><ul><li>运行iSCSI容器： 下面的命令将启动一个名为<code>stgt</code>的容器，该容器会作为iSCSI服务端运行，并映射端口3260以允许客户端连接。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run \<br>  --restart unless-stopped<br>  --detach \<br>  --name stgt \<br>  --restart unless-stopped \<br>  --net host \<br>  --privileged \<br>  --volume /etc/target:/etc/target \<br>  --volume /run/lvm:/run/lvm \<br>  --volume /lib/modules:/lib/modules \<br>  --volume /sys/kernel/config:/sys/kernel/config \<br>  --volume /dev:/dev \<br>  --volume /vol2/1000/iscsi_img:/vol2/1000/iscsi_img(使用自己的img镜像所在的文件目录,并非.img文件的路径) \ <br>wtnb75/stgt<br></code></pre></td></tr></table></figure><ul><li>创建Target：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> stgt tgtadm --mode target --op new --tid 1 --targetname iqn.2025-02.com.comsys:iscsi.fcdisk(名字自己定)<br></code></pre></td></tr></table></figure><ul><li><strong>创建LUN</strong>（这里假设你有一个硬盘镜像文件<code>/vol2/1000/iscsi_img/storage.img</code>,或者一个硬盘分区）：</li></ul><h6 id="方式一-使用-img硬盘镜像文件创建-如果没有现成的镜像文件，可以先通过dd或者truncate命令创建一个："><a href="#方式一-使用-img硬盘镜像文件创建-如果没有现成的镜像文件，可以先通过dd或者truncate命令创建一个：" class="headerlink" title="方式一:  使用.img硬盘镜像文件创建,如果没有现成的镜像文件，可以先通过dd或者truncate命令创建一个："></a>方式一:  使用.img硬盘镜像文件创建,如果没有现成的镜像文件，可以先通过<code>dd</code>或者<code>truncate</code>命令创建一个：</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#使用dd命令创建</span><br><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/zero of=/vol2/1000/iscsi_img/storage.img bs=1M count=1024   <span class="hljs-comment"># 创建一个1GB大小的镜像文件,记得使用自己的路径</span><br><span class="hljs-comment">#或者使用truncate 命令,truncate 命令不会立即分配实际的磁盘空间，而是通过稀疏文件的方式标记文件大小，这意味着文件的实际占用空间会随着数据写入而逐渐增加</span><br><span class="hljs-built_in">truncate</span> -s 2G /vol2/1000/iscsi_img/storage.img<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#创建LUN</span><br>docker <span class="hljs-built_in">exec</span> stgt tgtadm --mode logicalunit --op new --tid 1 --lun 1 --backing-store /vol2/1000/iscsi_img/storage.img<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE]</p><p>可以后期增加 <code>.img</code> 文件的大小,详情请见文章末尾</p></blockquote><h6 id="方式二-使用硬盘分区创建-分区为-dev-adb1-请根据实际情况调整"><a href="#方式二-使用硬盘分区创建-分区为-dev-adb1-请根据实际情况调整" class="headerlink" title="方式二:  使用硬盘分区创建,分区为/dev/adb1,请根据实际情况调整"></a>方式二:  使用硬盘分区创建,分区为<code>/dev/adb1</code>,请根据实际情况调整</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"> <span class="hljs-comment"># 注意ISCSI通过提供块设备（例如硬盘或分区）的方式进行工作,不能直接共享一个文件系统目录</span><br>docker <span class="hljs-built_in">exec</span> stgt tgtadm --mode logicalunit --op new --tid 1 --lun 1 --backing-store /dev/sdb1<br></code></pre></td></tr></table></figure><ul><li>授权： 允许特定网段内的客户端访问iSCSI Target。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> stgt tgtadm --mode target --op <span class="hljs-built_in">bind</span> --tid 1 --initiator-address 192.168.0.105   <span class="hljs-comment">#(客户端IP)</span><br></code></pre></td></tr></table></figure><ul><li>查看已定义的信息：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> stgt tgtadm --mode target --op show<br></code></pre></td></tr></table></figure><ul><li>输出如下:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@learn 1000]# docker <span class="hljs-built_in">exec</span> stgt tgtadm --mode target --op show<br>Target 1: iqn.2017-04.com.comsys:iscsi.fcdisk<br>    System information:<br>        Driver: iscsi<br>        State: ready<br>    I_T nexus information:<br>    LUN information:<br>        LUN: 0<br>            Type: controller<br>            SCSI ID: IET     00010000<br>            SCSI SN: beaf10<br>            Size: 0 MB, Block size: 1<br>            Online: Yes<br>            Removable media: No<br>            Prevent removal: No<br>            Readonly: No<br>            SWP: No<br>            Thin-provisioning: No<br>            Backing store <span class="hljs-built_in">type</span>: null<br>            Backing store path: None<br>            Backing store flags: <br>        LUN: 1<br>            Type: disk<br>            SCSI ID: IET     00010001<br>            SCSI SN: beaf11<br>            Size: 2147 MB, Block size: 512<br>            Online: Yes<br>            Removable media: No<br>            Prevent removal: No<br>            Readonly: No<br>            SWP: No<br>            Thin-provisioning: No<br>            Backing store <span class="hljs-built_in">type</span>: rdwr<br>            Backing store path: /vol2/1000/iscsi_img/storage.img<br>            Backing store flags: <br>    Account information:<br>    ACL information:<br>        192.168.0.105<br></code></pre></td></tr></table></figure><ul><li>开放防火墙3260端口</li></ul><p>确保服务器上的防火墙允许iSCSI通信，默认情况下，iSCSI使用3260端口。可以暂时关闭防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#在CentOS/RHEL系统上： </span><br>systemctl stop firewalld<br></code></pre></td></tr></table></figure><p>或者，只开放特定端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">firewall-cmd --zone=public --add-port=3260/tcp --permanent<br>firewall-cmd --reload<br></code></pre></td></tr></table></figure><h3 id="3-在客户端（如-Windows-11）挂载-iSCSI-Target"><a href="#3-在客户端（如-Windows-11）挂载-iSCSI-Target" class="headerlink" title="3. 在客户端（如 Windows 11）挂载 iSCSI Target"></a>3. 在客户端（如 Windows 11）挂载 iSCSI Target</h3><ul><li><p><strong>在 Windows 中使用 iSCSI Initiator 连接到服务器上的 iSCSI Target</strong>。#具体参考csdn文章</p><p><a href="https://blog.csdn.net/beck_li/article/details/139669146">配置Windows客户端连接iSCSI设备_windows 连接iscsi-CSDN博客</a></p></li><li><p><strong>初始化并格式化磁盘</strong>（如果新添加）。</p></li><li><p><strong>验证连接</strong>：确保可以读写数据到新挂载的卷。</p></li></ul><h3 id="4-服务端查看通过iSCSI挂载到Windows-的磁盘上放入的文件"><a href="#4-服务端查看通过iSCSI挂载到Windows-的磁盘上放入的文件" class="headerlink" title="4.服务端查看通过iSCSI挂载到Windows 的磁盘上放入的文件"></a>4.服务端查看通过iSCSI挂载到Windows 的磁盘上放入的文件</h3><p>参考 <a href="https://blog.dutyc.top/2025/02/13/P1_%E9%83%A8%E7%BD%B2%E4%B8%80%E4%B8%AAiSCSI%E6%9C%8D%E5%8A%A1%E7%AB%AF%EF%BC%8C%E5%B0%86NAS%E7%A9%BA%E9%97%B4%E6%8C%82%E8%BD%BD%E6%88%90%E7%9C%9F%E6%AD%A3%E7%9A%84%E7%94%B5%E8%84%91%E7%A1%AC%E7%9B%98/">P1_部署一个iSCSI服务端，将NAS空间挂载成真正的电脑硬盘 - DUTYC博客</a> 第5章节</p><h3 id="5-后期调整-img文件的大小"><a href="#5-后期调整-img文件的大小" class="headerlink" title="5.后期调整.img文件的大小"></a>5.后期调整.img文件的大小</h3><blockquote><p>[!IMPORTANT]</p><p>最好在一个非生产环境中测试整个过程，以避免意外的数据丢失或其他问题。</p></blockquote><h3 id="步骤-1-增加-img-文件的大小"><a href="#步骤-1-增加-img-文件的大小" class="headerlink" title="步骤 1: 增加 .img 文件的大小"></a>步骤 1: 增加 <code>.img</code> 文件的大小</h3><p>首先，增加 <code>.img</code> 文件的物理大小。假设想将其扩展到 50GB：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">truncate</span> -s 50G /vol2/1000/iscsi_img/storage.img<br></code></pre></td></tr></table></figure><p>或使用 <code>dd</code>（实际分配空间）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/zero bs=1M count=0 seek=50G of=/vol2/1000/iscsi_img/storage.img<br></code></pre></td></tr></table></figure><h3 id="加载-img-文件为循环设备"><a href="#加载-img-文件为循环设备" class="headerlink" title="加载 .img 文件为循环设备"></a>加载 <code>.img</code> 文件为循环设备</h3><p>接下来，将 <code>.img</code> 文件加载为一个循环设备：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">losetup -f --show /vol2/1000/iscsi_img/storage.img<br></code></pre></td></tr></table></figure><p>这将返回一个循环设备名称，例如 <code>/dev/loop0</code>。</p><h3 id="调整-NTFS-分区大小"><a href="#调整-NTFS-分区大小" class="headerlink" title="调整 NTFS 分区大小"></a>调整 NTFS 分区大小</h3><p>由于 <code>.img</code> 文件包含的是 NTFS 文件系统，我们需要使用 <code>ntfsresize</code> 来调整文件系统的大小。在此之前，请确保安装了 <code>ntfs-3g</code> 工具包，它包含了 <code>ntfsresize</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install ntfs-3g -y<br></code></pre></td></tr></table></figure><h4 id="检查文件系统的一致性"><a href="#检查文件系统的一致性" class="headerlink" title="检查文件系统的一致性"></a>检查文件系统的一致性</h4><p>在调整大小之前，建议先检查文件系统的完整性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ntfsfix /dev/loop0<br></code></pre></td></tr></table></figure><p>虽然 <code>ntfsfix</code> 主要用于修复NTFS文件系统中的错误，但在某些情况下，它也能帮助确保文件系统处于良好的状态以便进行调整。</p><h4 id="调整文件系统大小"><a href="#调整文件系统大小" class="headerlink" title="调整文件系统大小"></a>调整文件系统大小</h4><p>现在可以使用 <code>ntfsresize</code> 来调整文件系统的大小。请注意，<code>ntfsresize</code> 不会自动调整分区表，因此我们只需关注文件系统本身：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ntfsresize -i /dev/loop0   <span class="hljs-comment"># 查看当前文件系统信息</span><br>ntfsresize --force /dev/loop0   <span class="hljs-comment"># 调整文件系统以占用所有可用空间</span><br></code></pre></td></tr></table></figure><p>注意：<code>ntfsresize</code> 在执行操作前会进行一次模拟运行并询问是否继续，使用 <code>--force</code> 参数可以直接执行调整，但请谨慎使用。</p><h3 id="更新-iSCSI-Target-配置"><a href="#更新-iSCSI-Target-配置" class="headerlink" title="更新 iSCSI Target 配置"></a>更新 iSCSI Target 配置</h3><p>理论上，在扩展 <code>.img</code> 文件和调整文件系统大小后，iSCSI Target 应该已经能够识别新的容量。但是，为了确保客户端能看到全部可用空间，可能需要在客户端上重新扫描或重新连接 iSCSI Target。</p><h3 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h3><blockquote><p>[!NOTE]</p><p>以上步骤详细描述了如何在 Linux (NAS)上安装docker部署 iSCSI Target。每个环境可能有其特定的需求或限制，请根据实际情况调整上述步骤; 如果有任何问题或需要进一步的帮助，请询问我们</p><p>邮箱:<a href="mailto:&#x64;&#117;&#x74;&#121;&#99;&#x2e;&#x73;&#x74;&#x75;&#x64;&#105;&#111;&#x40;&#113;&#x71;&#46;&#99;&#111;&#x6d;">&#x64;&#117;&#x74;&#121;&#99;&#x2e;&#x73;&#x74;&#x75;&#x64;&#105;&#111;&#x40;&#113;&#x71;&#46;&#99;&#111;&#x6d;</a>     <a href="https://github.com/dutyc">作者Github : Persistence</a>   </p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>NAS</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>P1[向NAS借一点空间]_部署一个iSCSI服务端，将NAS空间挂载成真正的电脑硬盘</title>
    <link href="/2025/02/13/P1_%E9%83%A8%E7%BD%B2%E4%B8%80%E4%B8%AAiSCSI%E6%9C%8D%E5%8A%A1%E7%AB%AF%EF%BC%8C%E5%B0%86NAS%E7%A9%BA%E9%97%B4%E6%8C%82%E8%BD%BD%E6%88%90%E7%9C%9F%E6%AD%A3%E7%9A%84%E7%94%B5%E8%84%91%E7%A1%AC%E7%9B%98/"/>
    <url>/2025/02/13/P1_%E9%83%A8%E7%BD%B2%E4%B8%80%E4%B8%AAiSCSI%E6%9C%8D%E5%8A%A1%E7%AB%AF%EF%BC%8C%E5%B0%86NAS%E7%A9%BA%E9%97%B4%E6%8C%82%E8%BD%BD%E6%88%90%E7%9C%9F%E6%AD%A3%E7%9A%84%E7%94%B5%E8%84%91%E7%A1%AC%E7%9B%98/</url>
    
    <content type="html"><![CDATA[<h1 id="iSCSI-部署-将NAS空间变为本地磁盘，并拥有与实体硬盘所有常用功能"><a href="#iSCSI-部署-将NAS空间变为本地磁盘，并拥有与实体硬盘所有常用功能" class="headerlink" title="iSCSI 部署-将NAS空间变为本地磁盘，并拥有与实体硬盘所有常用功能"></a>iSCSI 部署-将NAS空间变为本地磁盘，并拥有与实体硬盘所有常用功能</h1><p>本指南包括所需软件的安装步骤。这个指南涵盖了从安装必要的软件包到配置 iSCSI Target 并在客户端挂载使用的基本流程</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><blockquote><p>[!NOTE]</p><p>为解决电脑空间不足且程序、游戏无法安装到smb共享的网络硬盘的问题，可通过iSCSI协议挂载NAS存储空间，使电脑将其识别为本地硬盘，实际使用上与物理硬盘一致</p></blockquote><h3 id="1-安装必要的软件"><a href="#1-安装必要的软件" class="headerlink" title="1. 安装必要的软件"></a>1. 安装必要的软件</h3><p>服务端配置（Linux 系统）</p><ul><li><p><strong>安装 <code>targetcli</code> 和相关工具</strong>：</p><ul><li><p>对于基于 Red Hat 的系统（如 CentOS、RHEL、Fedora）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> yum install targetcli<br></code></pre></td></tr></table></figure></li><li><p>对于基于 Debian 的系统（如 Ubuntu）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt-get update<br><span class="hljs-built_in">sudo</span> apt-get install targetcli-fb<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>安装 <code>ntfs-3g</code> 工具</strong>（用于挂载 NTFS 文件系统）：</p><ul><li><p>对于基于 Red Hat 的系统：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> yum install ntfs-3g<br></code></pre></td></tr></table></figure></li><li><p>对于基于 Debian 的系统：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt-get install ntfs-3g<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>安装 <code>lsof</code> 和 <code>psmisc</code> 包</strong>（用于查找和终止占用文件系统的进程）：</p><ul><li><p>对于基于 Red Hat 的系统：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> yum install lsof psmisc<br></code></pre></td></tr></table></figure></li><li><p>对于基于 Debian 的系统：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt-get install lsof psmisc<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="2-创建后端存储"><a href="#2-创建后端存储" class="headerlink" title="2. 创建后端存储"></a>2. 创建后端存储</h3><ul><li><p>进入 <code>targetcli</code> shell：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> targetcli<br></code></pre></td></tr></table></figure></li><li><p>创建文件IO存储对象</p><p>（以&#x2F;home&#x2F;iscsi_disk.img 路径下的img镜像为例，大小为2GB）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">/&gt; <span class="hljs-built_in">cd</span> /backstores/fileio<br>/backstores/fileio&gt; create file_or_dev=/home/iscsi_disk.img name=my_iscsi_disk size=2G<br></code></pre></td></tr></table></figure></li></ul><h3 id="3-配置-iSCSI-Target"><a href="#3-配置-iSCSI-Target" class="headerlink" title="3. 配置 iSCSI Target"></a>3. 配置 iSCSI Target</h3><ul><li><p>创建一个新的 iSCSI Target</p><p>（使用合适的 IQN，例如iqn.2025-02.com.example:server.target0）#名字而已,随意</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">/&gt; <span class="hljs-built_in">cd</span> /iscsi<br>/iscsi&gt; create iqn.2025-02.com.example:server.target0<br></code></pre></td></tr></table></figure></li><li><p>进入新创建的 Target 的 TPG：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/iscsi&gt; <span class="hljs-built_in">cd</span> iqn.2025-02.com.example:server.target0/tpg1<br></code></pre></td></tr></table></figure></li><li><p>添加 LUN</p><p>（将之前创建的文件IO存储对象添加为 LUN）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/iscsi/iqn.20...rget0/tpg1&gt; luns/ create /backstores/fileio/my_iscsi_disk<br></code></pre></td></tr></table></figure></li><li><p>配置访问控制（ACL）</p><p>（根据需要设置客户端IQN）：Windows的ISCSI客户端中”配置”页面查看</p><img src="/img/QQ20250213.png" alt="QQ20250213" style="zoom:67%;" /><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/iscsi/iqn.20...rget0/tpg1&gt; acls/ create iqn.1991-05.com.microsoft:desktop-tcn6g45(换成自己的)<br></code></pre></td></tr></table></figure></li><li><p>禁用认证（如果适用）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/iscsi/iqn.20...rget0/tpg1&gt; <span class="hljs-built_in">set</span> attribute authentication=0<br></code></pre></td></tr></table></figure></li><li><p>启用 TPG</p><p>（通常默认已启用）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/iscsi/iqn.20...rget0/tpg1&gt; <span class="hljs-built_in">enable</span><br></code></pre></td></tr></table></figure></li><li><p>保存配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">/&gt; <span class="hljs-built_in">cd</span> /<br>/&gt; saveconfig<br>/&gt; <span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure></li></ul><blockquote><p>[!IMPORTANT]</p><p>请确保防火墙开放  3260  端口</p></blockquote><ul><li><p>配置防火墙规则以允许3260开放</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">sudo firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> <span class="hljs-literal">--</span><span class="hljs-comment">zone=public</span> <span class="hljs-literal">--</span><span class="hljs-comment">add</span><span class="hljs-literal">-</span><span class="hljs-comment">port=3260/tcp</span> <span class="hljs-literal">--</span><span class="hljs-comment">permanent</span><br><span class="hljs-comment">sudo firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> <span class="hljs-literal">--</span><span class="hljs-comment">reload</span><br></code></pre></td></tr></table></figure></li></ul><blockquote><p>[!NOTE] </p><h4 id="万不得已的情况下请使用此方法-彻底关闭防火墙-请勿在生产环境中使用此命令-适用于CentOS-7-或-RHEL-7-及其衍生版本"><a href="#万不得已的情况下请使用此方法-彻底关闭防火墙-请勿在生产环境中使用此命令-适用于CentOS-7-或-RHEL-7-及其衍生版本" class="headerlink" title="(万不得已的情况下请使用此方法)   彻底关闭防火墙(请勿在生产环境中使用此命令 ,适用于CentOS 7 或 RHEL 7 及其衍生版本)"></a><em><strong>(万不得已的情况下请使用此方法)</strong></em>   彻底关闭防火墙(请勿在生产环境中使用此命令 ,适用于CentOS 7 或 RHEL 7 及其衍生版本)</h4><ol><li><p><strong>停止 <code>firewalld</code> 服务</strong>：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">sudo systemctl stop firewalld<br></code></pre></td></tr></table></figure></li><li><p><strong>禁用 <code>firewalld</code> 服务，使其不会在系统启动时自动启动</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">disable</span> firewalld<br></code></pre></td></tr></table></figure></li></ol></blockquote><ul><li>重新加载 LIO 服务配置</li></ul><ol><li><p><strong>重启 LIO 服务</strong>： 如果需要应用新的配置或者重启 LIO 服务，可以使用以下命令：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs aspectj">sudo systemctl restart <span class="hljs-keyword">target</span><br></code></pre></td></tr></table></figure></li><li><p><strong>开机自启动 LIO 服务</strong>： 使用下面的命令确保 <code>target</code> 服务会在系统启动时自动运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> target<br></code></pre></td></tr></table></figure></li><li><p><strong>检查 LIO 服务状态</strong>： 若要查看 <code>target</code> 服务的状态，可以使用：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran">sudo systemctl <span class="hljs-keyword">status</span> <span class="hljs-keyword">target</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="4-在客户端（如-Windows-11）挂载-iSCSI-Target"><a href="#4-在客户端（如-Windows-11）挂载-iSCSI-Target" class="headerlink" title="4. 在客户端（如 Windows 11）挂载 iSCSI Target"></a>4. 在客户端（如 Windows 11）挂载 iSCSI Target</h3><ul><li><p><strong>在 Windows 中使用 iSCSI Initiator 连接到服务器上的 iSCSI Target</strong>。#具体参考csdn文章</p><p><a href="https://blog.csdn.net/beck_li/article/details/139669146">配置Windows客户端连接iSCSI设备_windows 连接iscsi-CSDN博客</a></p></li><li><p><strong>初始化并格式化磁盘</strong>（如果新添加）。</p></li><li><p><strong>验证连接</strong>：确保可以读写数据到新挂载的卷。</p></li></ul><h3 id="5-服务端查看通过iSCSI挂载到Windows-的磁盘上放入的文件"><a href="#5-服务端查看通过iSCSI挂载到Windows-的磁盘上放入的文件" class="headerlink" title="5.服务端查看通过iSCSI挂载到Windows 的磁盘上放入的文件"></a>5.服务端查看通过iSCSI挂载到Windows 的磁盘上放入的文件</h3><h4 id="使用-parted-查看分区信息"><a href="#使用-parted-查看分区信息" class="headerlink" title="使用 parted 查看分区信息"></a>使用 <code>parted</code> 查看分区信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> parted /home/iscsi_disk.img unit s <span class="hljs-built_in">print</span><br></code></pre></td></tr></table></figure><p>命令输出如下:</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs fortran">[root@learn home]# sudo parted /home/iscsi_disk.img <span class="hljs-keyword">unit</span> s <span class="hljs-built_in">print</span><br><br>Model:  (<span class="hljs-keyword">file</span>)<br>Disk /home/iscsi_disk.img: <span class="hljs-number">4194304</span>s<br>Sector <span class="hljs-built_in">size</span> (<span class="hljs-keyword">logical</span>/physical): <span class="hljs-number">512</span>B/<span class="hljs-number">512</span>B<br>Partition Table: gpt<br>Disk Flags: <br><br><span class="hljs-keyword">Number</span>  Start   <span class="hljs-keyword">End</span>       <span class="hljs-built_in">Size</span>      <span class="hljs-keyword">File</span> system  <span class="hljs-keyword">Name</span>                          标志<br> <span class="hljs-number">1</span>      <span class="hljs-number">34</span>s     <span class="hljs-number">32767</span>s    <span class="hljs-number">32734</span>s                 Microsoft reserved partition  msftres<br> <span class="hljs-number">2</span>      <span class="hljs-number">32768</span>s  <span class="hljs-number">4190207</span>s  <span class="hljs-number">4157440</span>s  ntfs         Basic <span class="hljs-keyword">data</span> partition<br><br>[root@learn home]#<br></code></pre></td></tr></table></figure><p>根据提供的 <code>parted</code> 输出，<code>/home/iscsi_disk.img</code> 文件包含两个分区：</p><ol><li><strong>Microsoft reserved partition</strong>（微软保留分区），从第34个扇区开始，到第32767个扇区结束。</li><li><strong>Basic data partition</strong>（基本数据分区），从第32768个扇区开始，到第4190207个扇区结束，文件系统类型为 NTFS。</li></ol><p>为了在服务端查看第二个分区（即 NTFS 分区）中的文件内容，我们需要计算正确的偏移量，并使用该偏移量挂载这个分区。</p><h4 id="确认分区偏移量"><a href="#确认分区偏移量" class="headerlink" title="确认分区偏移量"></a>确认分区偏移量</h4><p>确保使用的偏移量是正确的。根据 <code>parted</code> 的输出，第二个分区（NTFS 分区）从第 32768 扇区开始，每个扇区大小为 512 字节。因此，偏移量应为：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tap">偏移量 =<span class="hljs-number"> 32768 </span>*<span class="hljs-number"> 512 </span>=<span class="hljs-number"> 16777216 </span>字节<br></code></pre></td></tr></table></figure><p>我们可以再次确认分区表和偏移量是否正确：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> parted /home/iscsi_disk.img unit s <span class="hljs-built_in">print</span><br></code></pre></td></tr></table></figure><ul><li><h4 id="使用-losetup-并检查设备"><a href="#使用-losetup-并检查设备" class="headerlink" title="使用 losetup 并检查设备"></a>使用 <code>losetup</code> 并检查设备</h4></li></ul><p>首先，使用 <code>losetup</code> 将 <code>.img</code> 文件关联到一个循环设备，并列出所有循环设备以确认是否正确关联：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> losetup -P -f --show /home/iscsi_disk.img<br></code></pre></td></tr></table></figure><p>这个命令会自动找到并分配一个空闲的循环设备，并且 <code>-P</code> 参数会自动扫描分区表并创建相应的设备节点（如 <code>/dev/loop0p1</code>, <code>/dev/loop0p2</code> 等）。</p><p>然后，列出所有循环设备：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">lsblk</span><br></code></pre></td></tr></table></figure><p>应该能看到类似 <code>/dev/loop0p1</code> 和 <code>/dev/loop0p2</code> 这样的设备节点。其中 <code>/dev/loop0p2</code> 应该对应于的 NTFS 分区。</p><blockquote><p>[!IMPORTANT]</p><p>NTFS 分区有时候会处于不安全的状态。具体来说，Windows 可能没有完全关闭该分区（例如通过快速启动或休眠功能），这导致了文件系统元数据仍然保存在 Windows 缓存中。因此，Linux 系统会拒绝以读写模式挂载该分区。所以要使用只读模式挂载</p></blockquote><h4 id="尝试只读挂载-方法二选一"><a href="#尝试只读挂载-方法二选一" class="headerlink" title="尝试只读挂载  (方法二选一)"></a><strong>尝试只读挂载</strong>  (方法二选一)</h4><p>如果你只是想查看文件而不需要修改它们，可以尝试以只读模式挂载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> mount -o ro,loop,offset=16777216 /home/iscsi_disk.img /mnt<br></code></pre></td></tr></table></figure><ul><li><em>或者直接挂载已识别的分区：</em></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> mount -t ntfs-3g -o ro /dev/loop0p2 /mnt<br></code></pre></td></tr></table></figure><ul><li><p>完成后的清理工作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> umount /mnt<br><span class="hljs-built_in">sudo</span> losetup -d /dev/loop0<br></code></pre></td></tr></table></figure></li></ul><h3 id="6-解决挂载点忙的问题"><a href="#6-解决挂载点忙的问题" class="headerlink" title="6. 解决挂载点忙的问题"></a>6. 解决挂载点忙的问题</h3><p>如果遇到挂载点忙的问题，可以使用以下命令查找并终止占用该挂载点的进程：</p><ul><li><p>查找占用 <code>/mnt</code> 的进程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> fuser -m /mnt<br><span class="hljs-built_in">sudo</span> lsof /mnt<br></code></pre></td></tr></table></figure></li><li><p>终止相关进程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">kill</span> -9 PID<br></code></pre></td></tr></table></figure><p>将PID替换为你找到的实际进程ID。</p></li></ul><h3 id="7-总结"><a href="#7-总结" class="headerlink" title="7.总结"></a>7.总结</h3><blockquote><p>[!NOTE]</p><p>以上步骤详细描述了如何在 Linux 服务器上安装必要的软件、配置 iSCSI Target、以及如何在客户端挂载和使用该 Target。同时也包含了如何在服务端查看通过 iSCSI 挂载的卷中的文件。每个环境可能有其特定的需求或限制，请根据实际情况调整上述步骤; 如果有任何问题或需要进一步的帮助，请询问我们</p><p>邮箱:<a href="mailto:&#100;&#117;&#116;&#121;&#99;&#x2e;&#115;&#116;&#117;&#x64;&#x69;&#x6f;&#64;&#x71;&#x71;&#x2e;&#x63;&#111;&#109;">&#100;&#117;&#116;&#121;&#99;&#x2e;&#115;&#116;&#117;&#x64;&#x69;&#x6f;&#64;&#x71;&#x71;&#x2e;&#x63;&#111;&#109;</a>     <a href="https://github.com/dutyc">作者Github : Persistence</a>   </p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>NAS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[已解决]电脑无法访问部分网站，手机却能正常上网？电信运营商限制揭秘及解决之道</title>
    <link href="/2025/01/26/%5B%E5%B7%B2%E8%A7%A3%E5%86%B3%5D%E7%94%B5%E8%84%91%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%E9%83%A8%E5%88%86%E7%BD%91%E7%AB%99%EF%BC%8C%E6%89%8B%E6%9C%BA%E5%8D%B4%E8%83%BD%E6%AD%A3%E5%B8%B8%E4%B8%8A%E7%BD%91%EF%BC%9F%E7%94%B5%E4%BF%A1%E8%BF%90%E8%90%A5%E5%95%86%E9%99%90%E5%88%B6%E6%8F%AD%E7%A7%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E4%B9%8B%E9%81%93/"/>
    <url>/2025/01/26/%5B%E5%B7%B2%E8%A7%A3%E5%86%B3%5D%E7%94%B5%E8%84%91%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%E9%83%A8%E5%88%86%E7%BD%91%E7%AB%99%EF%BC%8C%E6%89%8B%E6%9C%BA%E5%8D%B4%E8%83%BD%E6%AD%A3%E5%B8%B8%E4%B8%8A%E7%BD%91%EF%BC%9F%E7%94%B5%E4%BF%A1%E8%BF%90%E8%90%A5%E5%95%86%E9%99%90%E5%88%B6%E6%8F%AD%E7%A7%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E4%B9%8B%E9%81%93/</url>
    
    <content type="html"><![CDATA[<p>本期作者: persistence</p><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="[问题描述]"></a>[问题描述]</h1><p>春节来临之际，我回到了老家。到家的第一件事肯定是给我的各种设备连接网络。</p><p>一番折腾后，我在电脑上打开网易邮箱打算接收一下验证码，但好巧不巧的是，等待了一会儿浏览器提示无法访问，而我的手机却可以正常访问网易邮箱。当时我以为可能是电脑无线网卡的问题，于是用外置的USB网卡连接，结果还是一样；</p><blockquote><p>【注意】</p><p>电脑上访问其他网站都正常，出现问题的网站包括但不限于：可画、NEXT ITELLYOU、网易邮箱、bilibili。</p><p>这时手机上所有的网站和应用都可以正常访问，带宽速率也正常。</p></blockquote><h5 id="我给电脑插上网线，还是无法访问。我重启了几次光猫（因为老家平时待的人比较少，就没有装路由器）。"><a href="#我给电脑插上网线，还是无法访问。我重启了几次光猫（因为老家平时待的人比较少，就没有装路由器）。" class="headerlink" title="我给电脑插上网线，还是无法访问。我重启了几次光猫（因为老家平时待的人比较少，就没有装路由器）。"></a>我给电脑插上网线，还是无法访问。我重启了几次光猫（因为老家平时待的人比较少，就没有装路由器）。</h5><blockquote><p>【重要】</p><p>【注意！！！没装路由器是本次故障的突破口】</p></blockquote><p>我折腾了一会儿（包括重启光猫，给光猫恢复出厂设置），最后实在没有办法了，拨打了电信客服的电话（10000）。</p><p>和客服描述问题后，客服让我等一会儿与工程师沟通，工程师会上门解决问题。我和工程师简单沟通了几句，随后工程师询问了具体住址，两小时后，两位工程师就来了（PS：我还以为明天才来，没想到工程师下午六点也赶来帮我解决问题）。</p><p>工程师赶到后先测试了一下带宽速率（不出意外是正常的），随后又查看了光衰情况（不出意外也是正常的），接着来到电脑前查看问题。</p><p>我向两位工程师复现了一下问题，随后又给电脑连上了手机热点，问题突然就消失了。</p><p>两位工程师思索了一会儿，给出了一个非常有价值的答复：</p><h1 id="电信运营商后台会对不使用路由器只使用光猫的用户做限制！！"><a href="#电信运营商后台会对不使用路由器只使用光猫的用户做限制！！" class="headerlink" title="电信运营商后台会对不使用路由器只使用光猫的用户做限制！！"></a>电信运营商后台会对不使用路由器只使用光猫的用户做限制！！</h1><p>这个限制似乎只会在电脑设备上出现。</p><p>工程师建议我使用路由器，但由于老家我也不会待太长时间，所以谢绝了工程师推荐的套餐。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="[解决方案]"></a>[解决方案]</h1><ol><li>使用路由器（我暂时不采用）。</li><li>使用手机USB网络共享。</li></ol><h1 id="结尾"><a href="#结尾" class="headerlink" title="[结尾]"></a>[结尾]</h1><p>对于那些遇到类似问题的朋友，建议首先确认是否在同一网络环境下所有设备的表现都一致。如果发现难以解决的网络问题，那么除了检查硬件和网络配置外，还需要考虑是否存在来自网络服务提供商的限制。<br>如果你还有任何疑问或遇到了其他技术难题，欢迎留言交流。</p><h2 id="祝大家网络畅通，生活愉快！"><a href="#祝大家网络畅通，生活愉快！" class="headerlink" title="祝大家网络畅通，生活愉快！"></a>祝大家网络畅通，生活愉快！</h2>]]></content>
    
    
    
    <tags>
      
      <tag>网络问题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[已解决]关于硬盘损坏导致的开机异常缓慢问题</title>
    <link href="/2025/01/26/%E5%B7%B2%E8%A7%A3%E5%86%B3-%E5%85%B3%E4%BA%8E%E7%A1%AC%E7%9B%98%E6%8D%9F%E5%9D%8F%E5%AF%BC%E8%87%B4%E7%9A%84%E5%BC%80%E6%9C%BA%E5%BC%82%E5%B8%B8%E7%BC%93%E6%85%A2%E9%97%AE%E9%A2%98/"/>
    <url>/2025/01/26/%E5%B7%B2%E8%A7%A3%E5%86%B3-%E5%85%B3%E4%BA%8E%E7%A1%AC%E7%9B%98%E6%8D%9F%E5%9D%8F%E5%AF%BC%E8%87%B4%E7%9A%84%E5%BC%80%E6%9C%BA%E5%BC%82%E5%B8%B8%E7%BC%93%E6%85%A2%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>本期作者:persistence</p><h2 id="事件经过"><a href="#事件经过" class="headerlink" title="[事件经过]"></a>[事件经过]</h2><p>一天，当我和往常一样打开主力机，准备启动游戏好好放松一下，没想到电脑开机在加载页面整整转了十分钟的圈圈。</p><blockquote><p>【注意】</p><p>我的电脑配置并不低，为R5 5500＋RX5600XT，并且搭配致钛 TiPlus5000 512GB版本作为系统盘和游戏盘，同时又接了两块希捷酷鱼2T机械硬盘，机箱风道良好，不存在积热问题。</p></blockquote><p>而且，在进入系统后，桌面图标一片空白，系统一直处于无响应状态，甚至都无法正常关机。然后我尝试进入安全模式，结果还是一样，照样卡在开机加载动画转圈。</p><p>我就寻思着是不是掉盘问题导致的系统问题，于是我插上U盘打算进入PE看看是不是硬盘哪里出了问题，结果开机后也卡在了PE的加载页面！！！于是，我换上笔记本的硬盘再次测试，结果竟然和之前的故障一模一样。</p><p>我立刻把这个主力机的硬盘装到笔记本上，可以正常进入系统并且速度正常。</p><h2 id="故障分析"><a href="#故障分析" class="headerlink" title="[故障分析]"></a>[故障分析]</h2><p>既然只在主力机上出现这个问题，并且能够复现，问题就好办了。</p><p>首先，我排除了系统盘的问题，因为硬盘换到笔记本上游戏可以正常运行；随后，我决定拔掉剩下的两块机械硬盘，只插入一块系统盘看看能不能进入系统（当时可能已经急眼了，所以才做出这样的决定）。</p><h3 id="就这样，我只插入了一块系统盘，奇迹发生了，电脑正常进入了系统，并且游戏运行正常！"><a href="#就这样，我只插入了一块系统盘，奇迹发生了，电脑正常进入了系统，并且游戏运行正常！" class="headerlink" title="就这样，我只插入了一块系统盘，奇迹发生了，电脑正常进入了系统，并且游戏运行正常！"></a>就这样，我只插入了一块系统盘，奇迹发生了，电脑正常进入了系统，并且游戏运行正常！</h3><p>这一发现让人顿时摸不着头脑，明明之前不能开机，现在就能正常进入。思考了一会儿，于是决定再次插入两块机械硬盘。当然，又卡在系统加载动画。我当时就觉得可能是机械硬盘的问题了，就把两块机械硬盘依次与主板连接，在我连接上第二块机械硬盘时，故障就复现了，那么问题现在已经非常明确了。</p><p>经过一系列排查，最终发现问题出在其中一块机械硬盘上。这块硬盘出现了大面积坏道，导致系统在读取数据时出现严重延迟甚至无法正确识别硬盘，从而引发了系统长时间卡顿的问题。</p>]]></content>
    
    
    
    <tags>
      
      <tag>电脑故障</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[已解决]关于跳过Windows11安装时硬件检测 导致后续无法获取大版本更新的解决方案</title>
    <link href="/2025/01/25/%E5%B7%B2%E8%A7%A3%E5%86%B3-%E5%85%B3%E4%BA%8E%E8%B7%B3%E8%BF%87Windows11%E5%AE%89%E8%A3%85%E6%97%B6%E7%9A%84%E7%A1%AC%E4%BB%B6%E6%A3%80%E6%B5%8B-%E5%AF%BC%E8%87%B4%E5%90%8E%E7%BB%AD%E6%97%A0%E6%B3%95%E8%8E%B7%E5%8F%96%E5%A4%A7%E7%89%88%E6%9C%AC%E6%9B%B4%E6%96%B0%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2025/01/25/%E5%B7%B2%E8%A7%A3%E5%86%B3-%E5%85%B3%E4%BA%8E%E8%B7%B3%E8%BF%87Windows11%E5%AE%89%E8%A3%85%E6%97%B6%E7%9A%84%E7%A1%AC%E4%BB%B6%E6%A3%80%E6%B5%8B-%E5%AF%BC%E8%87%B4%E5%90%8E%E7%BB%AD%E6%97%A0%E6%B3%95%E8%8E%B7%E5%8F%96%E5%A4%A7%E7%89%88%E6%9C%AC%E6%9B%B4%E6%96%B0%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h6 id="本期作者-persistence"><a href="#本期作者-persistence" class="headerlink" title="本期作者: persistence"></a>本期作者: persistence</h6><h2 id="原因分析"><a href="#原因分析" class="headerlink" title="[原因分析]"></a>[原因分析]</h2><p>最近(以前的往事),我在已经用了一段时间的Windows11主力机上准备获取最近的22H2的大版本更新时,发现无论如何点击”检查更新”按钮,一直都无法获取22H2的更新</p><p><img src="/img/22H2.png" alt="22H2"></p><p>刚开始很纳闷,还以为是网络问题,就用手机开了个热点试了试,还是不行.</p><p>在我逛了众多文章后,终于知道了是因为安装Win11时跳过了硬件检测,而且主板也不支持TPM2.0,所以微软没有推送22H2的更新(因为我的主板不支持TPM2.0,所以当时就直接跳过了)</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="[解决方案]"></a>[解决方案]</h2><p>方法一:</p><p>下载Win10的任意一个版本镜像和Win1122H2的安装镜像(或者当时的最新镜像),然后把镜像解压到空间充足的位置,</p><p>将 Windows 10 ISO 中的 appraiserres.dll 在 sources 文件夹下）下载链接:<a href="https://dutyc.us.kg/file/appraiserres.dll">https://dutyc.us.kg/file/appraiserres.dll</a></p><p>替换 Windows 11 ISO 中的同一目录的同名文件,然后运行Win11镜像里面的安装程序(setup)</p><p>开始安装windows11,点击更改安装程序下载更新的方式，这里选择不是现在，点击下一页</p><p><img src="https://pic3.zhimg.com/v2-47ee3ab0aeaa43cc4e9244f7bd9834b0_1440w.jpg" alt="img"></p><p>windows11安装程序开始检查你的电脑，。这里已经绕开了<a href="https://zhida.zhihu.com/search?content_id=237847138&content_type=Article&match_order=1&q=tpm&zhida_source=entity">tpm</a>和cpu的验证，检查通过。开始正常的安装</p><p><img src="https://pica.zhimg.com/v2-9a92a92a9fda3578fcec7e716a9228e8_1440w.jpg" alt="img"></p><p>整个的安装过程，这里就全程快进了，全自动安装，期间会有几次重启。<br>升级安装完成后，直接点击开始菜单–设置–系统，查看系统信息</p><p><img src="/img/22H21.png" alt="22H21"></p>]]></content>
    
    
    
    <tags>
      
      <tag>电脑故障</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
